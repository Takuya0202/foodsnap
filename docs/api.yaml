openapi: 3.0.0
info:
  title: foodsnap
  description: "料理メニューを中心にアプローチし、料理の魅力を直感的に伝えるアプリ"
  version: 1.0.0
tags:
  - name: "users"
    description: "ユーザーに関わるAPI"
  - name: "stores"
    description: "店舗に関わるAPI"
  - name: "admin"
    description: "店舗管理者に関わるAPI"

servers:
  - url: http://localhost:8787/api
    description: "ローカル用"

paths:
  /users/register:
    post:
      summary: "user登録(eamil & password)"
      description: "メールアドレスでのユーザー登録"
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/registerValidation"
      responses:
        201:
          description: "user登録成功時"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: "登録されたメールアドレス"
                    example: "example@example.com"
                    format: email
        400:
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserValidationError"
        500:
          $ref: "#/components/responses/serverError"

  /auth/google:
    get:
      summary: "user登録&ログイン(Google認証)"
      description: "GoogleプロバイダーでのOAuth認証を開始し、Google認証画面にリダイレクトします"
      tags:
        - users
      responses:
        #ステータスコード302はリダイレクトを意味する。
        302:
          description: "Google認証画面へのリダイレクト"
          headers:
            Location:
              description: "Google OAuth認証URL"
              schema:
                type: string
                example: "https://accounts.google.com/oauth/authorize?client_id=..."
                format: url
                description: "Google OAuth認証のURL"
        400:
          description: "リクエストエラー"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "エラーメッセージ"
                    example: "OAuth認証に失敗しました。"
        500:
          $ref: "#/components/responses/serverError"
  
  /auth/callback:
    post:
      summary: "ユーザー登録でcallbackされるAPI"
      description: "accessTokenを受け取って、ユーザー登録を確立させる"
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accessToken
              properties:
                accessToken:
                  type: string
                  description: "URLから取得したtoken"
                  example: "cijij13213ubuihrqrhiu12moovwifof"
      responses:
        200:
          $ref: "#/components/responses/success"
        400:
          description: "トークンエラー"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "トークンエラー"
                    example: "accessTokenが無効、存在しません"
        500:
          $ref: "#/components/responses/serverError"

  /user/login:
    post:
      summary: "ユーザーログイン(email & password)"
      description: "email & passwordを受け取って、ユーザーをログイン状態にする"
      tags:
        - users
      requestBody:
        $ref: "#/components/requestBodies/loginValidation"
      responses:
        200:
          description: "ログイン成功時"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserSchema"
        400:
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserValidationError"
        500:
          $ref: "#/components/responses/serverError"
  
  /user/check:
    get:
      summary: "ユーザー情報の確認(middleware)"
      description: "Cookieのtokenを使ってログインしているユーザーの情報を確認する。フロントのページ表示で使う。"
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        200:
          description: "ユーザー情報を返す"
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    description: "ユーザーの権限"
                    example: "user"
                    enum:
                      - "admin"
                      - "user"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
  
  /user/logout:
    post:
      summary: "ユーザーログアウト"
      description: "ユーザーをログアウト状態にする。cookieを削除"
      tags:
        - users
      security:
        - cookieAuth: []
      responses:
        200:
          $ref: "#/components/responses/success"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
  
  /user/{userId}/edit:
    put:
      summary: "ユーザー情報の編集"
      description: "ユーザー情報の編集。name , iconを編集"
      tags:
        - users
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        $ref: "#/components/requestBodies/editValidation"
      responses:
        200:
          description: "ユーザー情報の編集成功"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    description: "ユーザー情報の編集成功"
                    example: "ユーザー情報を更新しました。"
        400:
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditUserValidationError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"

  /user/{userId}/delete:
    delete:
      summary: "ユーザーの削除"
      description: "ユーザーを削除する。"
      tags:
        - users
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          $ref: "#/components/responses/success"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"

  /stores/top:
    get:
      summary: "店舗のトップページ"
      description: "店舗のトップページを表示する。"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
      responses:
        200:
          description: "半径3km以内の店舗情報を優先的に取得"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStoreSchema"
        500:
          $ref: "#/components/responses/serverError"
  
  /stores/index:
    get:
      summary: "店舗を一覧で取得"
      description: "店舗を一覧で取得。モーダルで表示するため、topと情報量は変わらない"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/genreId"
        - $ref: "#/components/parameters/prefectureId"
        - $ref: "#/components/parameters/tagId"
        - $ref: "#/components/parameters/keyword"
        - $ref: "#/components/parameters/area"
      responses:
        200:
          description: "店舗を一覧で取得"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStoreSchema" 
        404:
          description: "store not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "store not found"
                    example: "store not found"
        500:
          $ref: "#/components/responses/serverError"

  /stores/{storeId}:
    get:
      summary: "店舗の詳細情報を取得"
      description: "店舗の詳細情報を取得"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        200:
          description: "店舗の詳細情報を取得"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStoreDetailSchema"
        404:
          description: "store not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "store not found"
                    example: "store not found"
        500:
          $ref: "#/components/responses/serverError"

  /stores/{storeId}/like:
    post:
      summary: "店舗のいいね"
      description: "店舗のいいねをする。既にいいねしている場合はいいねを解除する。"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/storeId"
      security:
        - cookieAuth: []
      responses:
        200:
          $ref: "#/components/responses/success"
        400:
          description: "bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "bad request"
                    example: "いいねに失敗しました。"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"

  /stores/{storeId}/comment:
    get:
      summary: "店舗のコメントを取得"
      description: "店舗のコメントを取得する。"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        200:
          description: "店舗のコメントを取得"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseCommentSchema"
        400:
          description: "bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "bad request"
                    example: "コメントの取得に失敗しました。"
        500:
          $ref: "#/components/responses/serverError"

  /stores/{storeId}/comment/create:
    post:
      summary: "店舗のコメント"
      description: "店舗のコメントを投稿する。"
      tags:
        - stores
      parameters:
        - $ref: "#/components/parameters/storeId"
      security:
        - cookieAuth: []
      requestBody:
        $ref: "#/components/requestBodies/commentValidation"
      responses:
        200:
          $ref: "#/components/responses/success"
        400:
          description: "bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "bad request"
                    example: "コメントに失敗しました。"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"

  /admin/register:
    post:
      summary: "店舗管理者の登録"
      description: "店舗管理者を登録する。"
      tags:
        - admin




# コンポーネント
components:
  #パラメーター
  #pathパラメーターはエディター上でエラーが出るが、問題ない。
  #swagger Previewがopenapi3.1.0に多分対応してないので、警告を解消することができない。
  parameters:
    userId:
      name: userId
      in: path
      required: true 
      description: "ユーザーID"
      schema:
        type: string
        example: "123e4567-e89b-12d3-a456-426614174000"
        format: uuid
    
    genreId:
      name: genreId
      in: query
      required: false
      description: "ジャンルID"
      schema:
        type: string
        example: "1"

    storeId:
      name: storeId
      in: path
      required: true
      description: "店舗ID"
      schema:
        type: string
        example: "1"

    prefectureId:
      name: prefectureId
      in: query
      required: false
      description: "都道府県ID"
      schema:
        type: array
        items:
          type: string
          example: "1"
        example:
          - "1"
          - "2"
      
    tagId:
      name: tagId
      in: query
      required: false
      description: "タグID"
      schema:
        type: array
        items:
          type: string
          example: "1"
        example:
          - "1"
          - "2"

    area:
      name: area
      in: query
      required: false
      description: "エリア"
      schema:
        type: array
        items:
          type: string
          example:
            - "関東"
            - "関西"
            - "中部"
            - "近畿"
            - "九州"
            - "東北"
            - "四国"
          enum:
            - "関東"
            - "関西"
            - "中部"
            - "近畿"
            - "九州"
            - "東北"
            - "四国"

    keyword:
      name: keyword
      in: query
      required: false
      description: "キーワード"
      schema:
        type: string
        example: "ウニ丼"

    latitude:
      name: latitude
      in: query
      required: false
      description: "緯度"
      schema:
        type: number
        example: 35.6895
        format: float
    
    longitude:
      name: longitude
      in: query
      required: false
      description: "経度"
      schema:
        type: number
        example: 139.6917
        format: float

  #リクエストボディ
  requestBodies:
    registerValidation:
      description: "メールアドレス&パスワードでのユーザー登録"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterUserSchema"

    loginValidation:
      description: "メールアドレス&パスワードでのユーザーログイン"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginUserSchema"
    
    editValidation:
      description: "ユーザー情報の編集"
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/EditUserSchema"
    
    commentValidation:
      description: "コメントの投稿"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCommentSchema"
    
    adminRegisterValidation:
      description: "店舗管理者の登録"
      required: true
      content:
        application/json:
          schema:


  #schemas
  schemas:
    RegisterUserSchema:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: "ユーザ名"
          example: "田中 太郎"
          minLength: 1
          maxLength: 12
        email:
          type: string
          description: "メールアドレス"
          example: "example@example.com"
          format: email
          minLength: 1
        password:
          type: string
          description: "パスワード"
          example: "Password"
          minLength: 8
          maxLength: 20
          format: password

    LoginUserSchema:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: "メールアドレス"
          example: "example@example.com"
          format: email
          minLength: 1
        password:
          type: string
          description: "パスワード"
          example: "Password"
          minLength: 8
          maxLength: 20
          format: password

    EditUserSchema:
      type: object
      required:
        - name
        - icon
      properties:
        name:
          type: string
          description: "ユーザー名"
          example: "田中 太郎"
          minLength: 1
          maxLength: 12
        icon:
          type: string
          format: binary
          description: "ユーザーのアイコン"

    ResponseUserSchema:
      description: "ログイン時にglobalで保存するユーザー情報"
      type: object
      properties:
        id:
          type: string
          description: "ユーザーID(uuid)"
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          description: "メールアドレス"
          example: "example@example.com"
          format: email
        name:
          type: string
          description: "ユーザー名"
          example: "田中 太郎"
          minLength: 1
          maxLength: 12
        icon:
          type: string
          description: "ユーザーのアイコン。初期アイコンはpublicから参照"
          example: "https://example.com/icon.png"
          default: "default-icon.png"
        role:
          type: string
          description: "ユーザーの権限。admin or user 店舗管理者か一般ユーザー"
          example: "user"
          enum:
            - "admin"
            - "user"
          default: "user"
        likeStores:
          type: array
          description: "いいねした店舗"
          items:
            type: object
            properties:
              id:
                type: string
                description: "店舗ID(id)"
                example: "1"
              name:
                type: string
                description: "店舗名"
                example: "店舗名"
              photo:
                type: string
                description: "店舗の写真。初期写真はpublicから参照"
                example: "https://example.com/photo.png"
                default: "default-photo.png"
            example:
              - id: "1"
                name: "店舗名"
                photo: "https://example.com/photo.png"
              - id: "2"
                name: "店舗名"
                photo: "https://example.com/photo.png"

    RegisterUserValidationError:
      type: object
      properties:
        message:
          type: string
          description: "エラーメッセージ"
          example: "バリデーションエラーが発生しました"
        errors:
          type: object
          description: "各フィールドのエラー詳細"
          properties:
            name:
              type: string
              description: "ユーザー名のバリデーションエラー"
              example: 
              - "ユーザー名は必須です。"
              - "ユーザー名は12文字以下で入力してください。"
            email:
              type: string
              description: "メールアドレスのバリデーションエラー"
              example: 
              - "メールアドレスは必須です。"
              - "正しいメールアドレス形式で入力してください。"
              - "このメールアドレスは既に登録されています。"
            password:
              type: string
              description: "パスワードのバリデーションエラー"
              example: 
              - "パスワードは必須です。"
              - "パスワードは8文字以上20文字以下で入力してください。"

    LoginUserValidationError:
      description: "ログイン時のバリデーションエラー"
      type: object
      properties:
        email:
          type: string
          description: "メールアドレスのバリデーションエラー"
          example: 
          - "メールアドレスは必須です。"
          - "正しいメールアドレス形式で入力してください。"
        password:
          type: string
          description: "パスワードのバリデーションエラー"
          example: 
          - "パスワードは必須です。"
          - "パスワードは8文字以上20文字以下で入力してください。"
        message:
          type: string
          description: "ユーザー情報が見つからなかった場合"
          example: "メールアドレスまたはパスワードが間違っています。"

    EditUserValidationError:
      type: object
      properties:
        message:
          type: string
          description: "バリデーションエラー"
          example: "バリデーションエラーが発生しました"
        errors:
          type: object
          description: "各フィールドのエラー詳細"
          properties:
            name: 
              type: string
              description: "ユーザー名のバリデーションエラー"
              example: 
              - "ユーザー名は必須です。"
              - "ユーザー名は12文字以下で入力してください。"
            icon:
              type: string
              description: "ユーザーのアイコンのバリデーションエラー"
              example: "この画像は保存できません"

    ResponseStoreSchema:
      type: array
      description: "店舗の情報を取得。半径3km以内を優先的に取得"
      items:
        type: object
        properties:
          id:
            type: string
            description: "店舗ID"
            example: "1"
          name:
            type: string
            description: "店舗名"
            example: "店舗名"
          address:
            type: string
            description: "店舗の住所"
            example: "東京都千代田区永田町1-7-1"
          genre:
            type: string
            description: "店舗のジャンル"
            example: "寿司"
          likeCount:
            type: number
            description: "店舗のいいね数"
            example: 10
          commentCount:
            type: number
            description: "店舗のコメント数"
            example: 10
          posts:
            type: array
            description: "店舗の投稿。各4件まで表示"
            items:
              type: object
              properties:
                id:
                  type: string
                  description: "投稿ID"
                  example: "1"
                title:
                  type: string
                  description: "投稿タイトル"
                  example: "ウニ丼"
                price:
                  type: number
                  description: "投稿の価格"
                  example: 1000
                photo:
                  type: string
                  description: "投稿の写真。"
                  example: "https://example.com/photo.png"
                  format: url
      example:
        - id: "1"
          name: "店舗名"
          address: "東京都千代田区永田町1-7-1"
          genre: "寿司"
          likeCount: 10
          commentCount: 10
          posts:
            - id: "1"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              likeCount: 10
              commentCount: 10
            - id: "2"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              likeCount: 10
              commentCount: 10
            - id: "3"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              likeCount: 10
              commentCount: 10
            - id: "4"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              likeCount: 10
              commentCount: 10

    ResponseStoreDetailSchema:
      type: object
      properties:
        id:
          type: string
          description: "店舗ID"
          example: "1"
        name:
          type: string
          description: "店舗名"
          example: "店舗名"
        address:
          type: string
          description: "店舗の住所"
          example: "東京都千代田区永田町1-7-1"
        phone:
          type: string
          description: "店舗の電話番号"
          example: "03-1234-5678"
          format: tel
        genre:
          type: string
          description: "店舗のジャンル"
          example: "寿司"
        longitude:
          type: number
          description: "経度"
          example: 139.6917
          format: float
        latitude:
          type: number
          description: "緯度"
          example: 35.6895
          format: float
        link:
          type: string
          description: "店舗の公式サイトのURL"
          example: "https://example.com"
          format: url
        startAt:
          type: string
          description: "店舗の営業開始時間"
          example: "10:00"
          format: time
        endAt:
          type: string
          description: "店舗の営業終了時間"
          example: "22:00"
          format: time
        comment:
          type: array
          description: "店舗の感想・コメント"
          items:
            type: object
            properties:
              id:
                type: string
                description: "コメントID"
                example: "1"
              content:
                type: string
                description: "コメント内容"
                example: "美味しかったです"
              createdAt:
                type: string
                description: "コメント作成日時"
                example: "2021-01-01 00:00:00"
                format: date-time
              userId:
                type: string
                description: "コメント者のID"
                example: "1"
              userName:
                type: string
                description: "コメント者の名前"
                example: "田中 太郎"
              userIcon:
                type: string
                description: "コメント者のアイコン"
                example: "https://example.com/icon.png"
                default: "default-icon.png"
        posts:
          type: array
          description: "店舗の投稿"
          items:
            type: object
            properties:
              id:
                type: string
                description: "投稿ID"
                example: "1"
              title:
                type: string
                description: "投稿タイトル"
                example: "ウニ丼"
              price:
                type: number
                description: "投稿の価格"
                example: 1000
              photo:
                type: string
                description: "投稿の写真"
                example: "https://example.com/photo.png"
                format: url
              description:
                type: string
                description: "投稿の説明"
                example: "期間限定メニュー。9月末まで"
        tags:
          type: array
          description: "投稿のタグ"
          items:
            type: object
            properties:
              id:
                type: string
                description: "タグID"
                example: "1"
              name:
                type: string
                description: "タグ名"
                example: "寿司"
      example:
        - id: "1"
          name: "店舗名"
          address: "東京都千代田区永田町1-7-1"
          genre: "寿司"
          phone: "03-1234-5678"
          longitude: 139.6917
          latitude: 35.6895
          link: "https://example.com"
          startAt: "10:00"
          endAt: "22:00"
          comment: 
            - id: "1"
              content: "美味しかったです"
              createdAt: "2021-01-01 00:00:00"
              userId: "1"
              userName: "田中 太郎"
              userIcon: "https://example.com/icon.png"
            - id: "2"
              content: "美味しかったです"
              createdAt: "2021-01-01 00:00:00"
              userId: "1"
              userName: "田中 太郎"
              userIcon: "https://example.com/icon.png"
          posts: 
            - id: "1"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              description: "期間限定メニュー。9月末まで"
            - id: "2"
              title: "ウニ丼"
              price: 1000
              photo: "https://example.com/photo.png"
              description: "期間限定メニュー。9月末まで"
          tags:
            - id: "1"
              name: "ネット予約可能"
            - id: "2"
              name: "宴会OK"

    CreateCommentSchema:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "コメント内容"
          example: "美味しかったです"
          minLength: 1
          maxLength: 255

    ResponseCommentSchema:
      type: array
      description: "店舗のコメント"
      items:
        type: object
        properties:
          id:
            type: string
            description: "コメントID"
            example: "1"
          content:
            type: string
            description: "コメント内容"
            example: "美味しかったです"
          userId:
            type: string
            description: "コメント者のID"
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
          userName: 
            type: string
            description: "コメント者の名前"
            example: "田中 太郎"
          userIcon:
            type: string
            description: "コメント者のアイコン"
            example: "https://example.com/icon.png"
          createdAt:
            type: string
            description: "コメント作成日時"
            example: "2021-01-01 00:00:00"
            format: date-time
        example:
          - id: "1"
            content: "美味しかったです"
            userId: "123e4567-e89b-12d3-a456-426614174000"
            userName: "田中 太郎"
            userIcon: "https://example.com/icon.png"
            createdAt: "2021-01-01 00:00:00"

    RegisterAdminSchema:
      type: object
      description: "店舗管理者の登録"

  # セキュリティ
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: accessToken
      in: cookie

  #汎用的なレスポンス
  responses:
    success:
      description: "成功時"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "success"
                example: "success"
    serverError:
      description: "サーバーエラー"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "サーバーエラーメッセージ"
                example: "サーバーエラーが発生しました"
    authError:
      description: "認証エラー"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "認証エラーメッセージ"
                example: "認証エラーが発生しました"
